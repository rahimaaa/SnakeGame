import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Random;

public class SnakeGame extends JPanel implements ActionListener, KeyListener {
    private static final int WIDTH = 500;
    private static final int HEIGHT = 500;
    private static final int DOT_SIZE = 10;
    private static final int ALL_DOTS = 900;
    private static final int RAND_POS = 29;
    private static final int DELAY = 140;

    private ArrayList<Point> snake;
    private Point food;
    private Timer timer;
    private boolean leftDirection = false;
    private boolean rightDirection = true;
    private boolean upDirection = false;
    private boolean downDirection = false;
    private boolean inGame = true;
    private Random random;

    public SnakeGame() {
        setPreferredSize(new Dimension(WIDTH, HEIGHT));
        setBackground(Color.BLACK);
        setFocusable(true);
        addKeyListener(this);

        snake = new ArrayList<Point>();
        random = new Random();

        initGame();
    }

    private void initGame() {
        snake.clear();

        for (int i = 0; i < 3; i++) {
            snake.add(new Point(WIDTH / 2, HEIGHT / 2));
        }

        newFood();
        inGame = true;

        timer = new Timer(DELAY, this);
        timer.start();
    }

    private void newFood() {
        int x = random.nextInt(RAND_POS) * DOT_SIZE;
        int y = random.nextInt(RAND_POS) * DOT_SIZE;
        food = new Point(x, y);
    }

    private void move() {
        Point head = snake.get(0);
        int x = head.x;
        int y = head.y;

        if (leftDirection) {
            x -= DOT_SIZE;
        } else if (rightDirection) {
            x += DOT_SIZE;
        } else if (upDirection) {
            y -= DOT_SIZE;
        } else if (downDirection) {
            y += DOT_SIZE;
        }

        Point newHead = new Point(x, y);

        if (snake.contains(newHead) || x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) {
            inGame = false;
            timer.stop();
        }

        snake.add(0, newHead);

        if (newHead.equals(food)) {
            newFood();
        } else {
            snake.remove(snake.size() - 1);
        }
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        if (inGame) {
            g.setColor(Color.RED);
            g.fillRect(food.x, food.y, DOT_SIZE, DOT_SIZE);

            g.setColor(Color.GREEN);

            for (Point point : snake) {
                g.fillRect(point.x, point.y, DOT_SIZE, DOT_SIZE);
            }
        } else {
            String gameOverMessage = "Game Over";
            Font gameOverFont = new Font("Arial", Font.BOLD, 24);
            FontMetrics metrics = getFontMetrics(gameOverFont);

            g.setColor(Color.WHITE);
            g.setFont(gameOverFont);
            g.drawString(gameOverMessage, (WIDTH - metrics.stringWidth(gameOverMessage)) / 2, HEIGHT / 2);
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (inGame) {
            move();
        }

        repaint();
    }

    
   @Override
public void keyPressed(KeyEvent e) {
    int key = e.getKeyCode();

    if ((key == KeyEvent.VK_LEFT) && (!rightDirection)) {
        leftDirection = true;
        upDirection = false;
        downDirection = false;
    } else if ((key == KeyEvent.VK_RIGHT) && (!leftDirection)) {
        rightDirection = true;
        upDirection = false;
        downDirection = false;
    } else if ((key == KeyEvent.VK_UP) && (!downDirection)) {
        upDirection = true;
        leftDirection = false;
        rightDirection = false;
    } else if ((key == KeyEvent.VK_DOWN) && (!upDirection)) {
        downDirection = true;
        leftDirection = false;
        rightDirection = false;
    }
}
  @Override
public void keyReleased(KeyEvent e) {
    // This method is not used in the SnakeGame class, so no code is needed here.
}
@Override
public void keyTyped(KeyEvent e) {
    // This method is not used in the SnakeGame class, so no code is needed here.
}

}
